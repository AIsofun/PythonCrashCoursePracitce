#9.1.1 创建Dog类
#在Python中，首字母大写的名称指的是类。
# 这个类定义中没有圆括号，因为要从空白创建这个类。
class Dog():
    """一次模拟小狗的简单尝试"""

    """__init__()是一个特殊方法，
    每当你根据Dog类创建新实例时，Python都会自动运行它。
    在这个方法的名称中，开头和末尾各有两个下划线，这是一种约定，
    旨在避免Python默认方法与普通方法发生名称冲突。
    务必确保__init__()的两边都有两个下划线，
    否则当你使用类来创建实例时，将不会自动调用这个方法，
    进而引发难以发现的错误。"""

    '''在这个方法的定义中，形参self必不可少，而且必须位于其他形参的前面。
    为何必须在方法定义中包含形参self呢？
    因为Python调用这个方法来创建Dog实例时，将自动传入实参self。
    每个与实例相关联的方法调用都自动传递实参self，
    它是一个指向实例本身的引用，让实例能够访问类中的属性和方法。
    创建Dog实例时，Python将调用Dog类的方法__init__()。
    我们将通过实参向Dog()传递名字和年龄，self会自动传递，
    因此不需要传递它。
    每当根据Dog类创建实例时，都只需给最后两个形参（name和age）提供值。'''
    def __init__(self, name, age):
        """初始化属性name和age"""
        self.name = name
        self.age = age

        """
        上面定义的两个变量都有前缀self。
        以self为前缀的变量可供类中的所有方法使用，可以通过类的任何实例来访问。
        self.name = name获取与形参name相关联的值，并将其赋给变量name，
        然后该变量被关联到当前创建的实例。
        self.age = age的作用与此类似。像这样可通过实例访问的变量称为属性
        """
    def sit(self):
        """模拟小狗被命令时蹲下"""
        print(f"{self.name} is now sitting.")

    def roll_over(self):
        """模拟小狗被命令时打滚"""
        print(f"{self.name} rolled over!")

        """
        sit、roll_over这些方法执行时不需要额外的信息，
        因此它们只有一个形参self。"""